syntax = "proto2";
package synthpop;

message Population {
    repeated Household households = 1;
    repeated Person people = 2;

    // This is filled out per Activity enum value. The exception is for
    // `Activity::Home`; see `households` for that.
    map<int32, VenueList> venues_per_activity = 3;

    // Keyed by MSOA11CD
    map<string, InfoPerMSOA> info_per_msoa = 4;

    required Lockdown lockdown = 5;
}

message Household {
    // This is the index into Population::households
    required uint64 id = 1;
    // 2011 MSOA code
    required string msoa11cd = 2;
    // These IDs index into `Population::people`
    repeated uint64 members = 3;
    required HouseholdDetails details = 4;
}

message HouseholdDetails {
    /// An ID from the original data, kept around for debugging
    required int64 orig_hid = 1;

    // TODO Enums for many of these
    // National Statistics Socio-economic classification of the reference
    // person of the household (LC4605, census 2011)
    optional uint64 nssec8 = 2;
    // Type of accommodation (based on LC4402EW, census 2011)
    optional uint64 accomodation_type = 3;
    // Type of communal establishment (based on QS420, census 2011)
    optional uint64 communal_type = 4;
    // Number of rooms in the accommodation capped at 6 (LC4404EW, census 2011)
    optional uint64 num_rooms = 5;
    // Presence of central heating (based on LC4402EW, census 2011)
    required bool central_heat = 6;
    // Tenure (based on LC4402EW, census 2011)
    optional uint64 tenure = 7;
    // Number of cars capped at 3 (LC4202EW, census 2011)k
    optional uint64 num_cars = 8;
}

message VenueList {
    repeated Venue venues = 1;
}

message InfoPerMSOA {
    repeated Point shape = 1;
    // There's no relationship between this value and the people listed.
    required uint64 population = 2;
    // All building centroids within this MSOA. May be empty.
    repeated Point buildings = 3;
    repeated Flows flows_per_activity = 4;
}

// In WGS84
message Point {
    required float longitude = 1;
    required float latitude = 2;
}

message Person {
    // This is the index into Population::people
    required uint64 id = 1;
    // This is the index into Population::households
    required uint64 household = 2;
    // This indexes into venues_per_activity[Activity::WORK]
    optional uint64 workplace = 3;

    required Identifiers identifiers = 4;
    required Demographics demographics = 5;
    required Employment employment = 6;
    required Health health = 7;
    required TimeUse time_use = 8;
    repeated ActivityDuration activity_durations = 9;
}

// What fraction of a day somebody spends doing an activity.
message ActivityDuration {
    required Activity activity = 1;
    required double duration = 2;
}

message Identifiers {
    // identifier linking to the 2011 Census
    required int64 pid_census = 1;
    // identifier linking to the Time Use Survey 2015
    required int64 pid_tus = 2;
    // identifier linking to the Health Survey for England 2017
    required int64 pid_hse = 3;
    // a globally unique ID across all counties
    required string idp = 4;
}

message Demographics {
    required Sex sex = 1;
    required uint32 age_years = 2;
    required Origin origin = 3;
    required NSSEC5 socioeconomic_classification = 4;
}

message Employment {
    // The Standard Industrial Classification of Economic Activities 2007, 1st
    // layer (number corresponding to the letter in alphabetical order) for
    // where this person works. See
    // https://www.ons.gov.uk/methodology/classificationsandstandards/ukstandardindustrialclassificationofeconomicactivities.
    //
    // For example, 1 means "Agriculture, forestry, & fishing." 3 means "Manufacturing."
    optional uint64 sic1d07 = 1;
    // Standard Industrial Classification of Economic Activities 2007, 2nd
    // layer.
    optional uint64 sic2d07 = 2;
    // Previous version of the Standard Occupational Classification
    // (https://www.ons.gov.uk/methodology/classificationsandstandards/standardoccupationalclassificationsoc/soc2010).
    optional uint64 soc2010 = 3;
    required PwkStat pwkstat = 4;
    // Yearly salary in GBP. Note this may be 0 when salary_hourly is nonzero, when TimeUse is 0 for work.
    optional float salary_yearly = 5;
    // Hourly salary in GBP.
    optional float salary_hourly = 6;
}

enum Sex {
    MALE = 1;
    FEMALE = 2;
}

enum Origin {
    WHITE = 1;
    BLACK = 2;
    ASIAN = 3;
    MIXED = 4;
    OTHER = 5;
}

// National Statistics socio-economic classification
enum NSSEC5 {
    // Never worked and long-term unemployed
    UNEMPLOYED = 0;
    // Higher managerial, administrative and professional occupations
    HIGHER = 1;
    // Intermediate occupations
    INTERMEDIATE = 2;
    // Small employers and own account workers
    SMALL = 3;
    // Lower supervisory and technical occupations
    LOWER = 4;
    // Semi-routine and routine occupations
    ROUTINE = 5;
}

// Professional working status, from the time-use survey
enum PwkStat {
    // Not applicable (age < 16)
    NA = 0;
    // Full-time employee
    EMPLOYEE_FT = 1;
    // Part-time employee
    EMPLOYEE_PT = 2;
    // Unspecified employee
    EMPLOYEE_UNSPEC = 3;
    // Self-employed
    SELF_EMPLOYED = 4;
    // Unemployed (note this has a PWK_ prefix due to protobuf scoping rules)
    PWK_UNEMPLOYED = 5;
    // Retired
    RETIRED = 6;
    // Homemaker / maternity leave
    HOMEMAKER = 7;
    // Full-time student
    STUDENT_FT = 8;
    // Long-term sick / disability
    LONG_TERM_SICK = 9;
    // Other (note this has a PWK_ prefix due to protobuf scoping rules)
    PWK_OTHER = 10;
}

message Health {
    // Sourced from the Health Survey for England 2019
    required BMI bmi = 1;
    // See
    // https://alan-turing-institute.github.io/uatk-spc/modelling_methods.html#bmi-data.
    optional float bmi_new = 5;
    required bool has_cardiovascular_disease = 2;
    required bool has_diabetes = 3;
    required bool has_high_blood_pressure = 4;
}

// Body Mass Index
enum BMI {
    // Likely to be missing data
    NOT_APPLICABLE = 0;
    // Underweight: less than 18.5
    UNDERWEIGHT = 1;
    // Normal: 18.5 to less than 25
    NORMAL = 2;
    // Overweight: 25 to less than 30
    OVERWEIGHT = 3;
    // Obese I: 30 to less than 35
    OBESE_1 = 4;
    // Obese II: 35 to less than 40
    OBESE_2 = 5;
    // Obese III: 40 or more
    OBESE_3 = 6;
}

// The proportion of a day spent doing different daily activities.
// unknown + work + school + shop + services + leisure + escort + transport = not_home
// home + work_home = home_total
// not_home + home_total = 1
message TimeUse {
    required double unknown = 1;
    required double work = 2;
    required double school = 3;
    required double shop = 4;
    required double services = 5;
    required double leisure = 6;
    required double escort = 7;
    required double transport = 8;
    required double not_home = 9;
    required double home = 10;
    required double work_home = 11;
    required double home_total = 12;
}

// Per activity, a list of venues where anybody living in a certain MSOA is
// likely to go do that activity.
message Flows {
    // Note that HOME and WORK won't be represented here, since it varies
    // per-person.
    required Activity activity = 1;
    repeated Flow flows = 2;
}

message Flow {
    required uint64 venue_id = 1;
    // The probabilities sum to 1 for all `flows`
    required double weight = 2;
}

// Represents a place where people do an activity
message Venue {
    // IDs are reused across different activities; both this id and an Activity
    // is needed to lookup from venues_per_activity.
    required uint64 id = 1;
    required Activity activity = 2;

    required Point location = 3;
    // This only exists for PrimarySchool and SecondarySchool. It's a
    // https://en.wikipedia.org/wiki/Unique_Reference_Number.
    optional uint64 urn = 4;
}

enum Activity {
    RETAIL = 0;
    PRIMARY_SCHOOL = 1;
    SECONDARY_SCHOOL = 2;
    HOME = 3;
    WORK = 4;
}

// Describes a reduction in daily travel behavior due to COVID lockdowns.
message Lockdown {
    // The YYYY-MM-DD date of the first entry in the daily list.
    required string start_date = 1;
    // A coefficient to be applied to all not at home activities (unknown;
    // work; school; shop; services; leisure; escort; transport; not_home).
    // Update at home activity so that it still sums to 1.
    repeated float per_day = 2;
}
