---
title: "Using the SPC output file"
toc: true
---

Once you [download](outputs.qmd) or [generate](custom_areas.qmd) an SPC output
file for your study area, how do you use it? Each study area consists of one
`.pb` or [protocol buffer
file](https://developers.google.com/protocol-buffers/docs/overview). This file
efficiently encodes data following this
[schema](https://github.com/alan-turing-institute/uatk-spc/blob/main/synthpop.proto).
[Read more](schema.qmd) about what data is contained in the output.

You can read the "protobuf" (shorthand for a protocol buffer file) in any
[supported
language](https://developers.google.com/protocol-buffers/docs/overview#cross-lang),
and then extract and transform just the parts of the data you want for your
model.

We have examples for Python below, but feel free to request other languages.

## Python

To work with SPC protobufs in Python, you need two dependencies setup:

- The [protobuf](https://pypi.org/project/protobuf/) library
  - You can install system-wide with `pip install protobuf`
  - Or add as a dependency to a conda, poetry, etc environment
- The generated Python library, [synthpop_pb2.py](https://raw.githubusercontent.com/alan-turing-institute/uatk-spc/main/python/synthpop_pb2.py)
  - You can download a copy of this file into your codebase, then `import synthpop_pb2`
  - You can also generate the file yourself, following the [docs](https://developers.google.com/protocol-buffers/docs/reference/python-generated): `protoc --python_out=python/ synthpop.proto`

### Converting to Pandas data-frames and CSV

The [schema](schema.qmd) expresses relationships between people, households,
and venues that can't all be captured by a simple 2D table. Nevertheless, you
can extract per-person information and express as a dataframe or CSV file. See
[this example Python
script](https://github.com/alan-turing-institute/uatk-spc/blob/main/python/protobuf_to_csv.py)
for inspiration. You can try it out:

```shell
# Download a file
wget https://ramp0storage.blob.core.windows.net/spc-output/v1/rutland.pb.gz
# Uncompress
gunzip rutland.pb.gz
# Convert the .pb to JSON
python3 python/protobuf_to_csv.py --input_path data/output/rutland.pb
# View the output
less people.csv
```

### Converting .pb file to JSON format

To interactively explore the data, viewing JSON is much easier. It shows the
same structure as the protobuf, but in a human-readable text format. The
example below uses a [small Python
script](https://github.com/alan-turing-institute/uatk-spc/blob/main/python/protobuf_to_json.py):

```shell
# Download a file
wget https://ramp0storage.blob.core.windows.net/spc-output/v1/rutland.pb.gz
# Uncompress
gunzip rutland.pb.gz
# Convert the .pb to JSON
python3 python/protobuf_to_json.py data/output/rutland.pb > rutland.json
# View the output
less rutland.json
```

### Converting to numpy arrays

The [ASPICS](https://github.com/alan-turing-institute/uatk-aspics) project simulates the
spread of COVID through a population. The code uses numpy, and [this
script](https://github.com/alan-turing-institute/uatk-aspics/blob/main/convert_snapshot.py)
converts the protobuf to a bunch of different numpy arrays.

Note the ASPICS code doesn't keep using the generated Python protobuf classes
for the rest of the pipeline. Data frames and numpy arrays may be more familiar
and appropriate. The protobuf is a format optimized for reading and writing;
you don't need to use it throughout all of your model code.

### Visualizing venues

Use [this
script](https://github.com/alan-turing-institute/uatk-spc/blob/main/python/draw_venues.py)
to read a protobuf file, then draws a dot for every venue, color-coded by
activity.

![](img/venues.png)
